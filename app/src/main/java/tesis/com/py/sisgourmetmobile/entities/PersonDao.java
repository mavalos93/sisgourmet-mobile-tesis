package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdentyCard = new Property(1, String.class, "identyCard", false, "IDENTY_CARD");
        public final static Property Ruc = new Property(2, String.class, "ruc", false, "RUC");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property LastName = new Property(4, String.class, "lastName", false, "LAST_NAME");
        public final static Property LocationAddress = new Property(5, String.class, "locationAddress", false, "LOCATION_ADDRESS");
        public final static Property PrivatePhone = new Property(6, String.class, "privatePhone", false, "PRIVATE_PHONE");
        public final static Property MobilePhone = new Property(7, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property MailAddress = new Property(8, String.class, "mailAddress", false, "MAIL_ADDRESS");
        public final static Property NutritionalSatus = new Property(9, Boolean.class, "nutritionalSatus", false, "NUTRITIONAL_SATUS");
    };


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IDENTY_CARD\" TEXT," + // 1: identyCard
                "\"RUC\" TEXT," + // 2: ruc
                "\"NAME\" TEXT," + // 3: name
                "\"LAST_NAME\" TEXT," + // 4: lastName
                "\"LOCATION_ADDRESS\" TEXT," + // 5: locationAddress
                "\"PRIVATE_PHONE\" TEXT," + // 6: privatePhone
                "\"MOBILE_PHONE\" TEXT," + // 7: mobilePhone
                "\"MAIL_ADDRESS\" TEXT," + // 8: mailAddress
                "\"NUTRITIONAL_SATUS\" INTEGER);"); // 9: nutritionalSatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identyCard = entity.getIdentyCard();
        if (identyCard != null) {
            stmt.bindString(2, identyCard);
        }
 
        String ruc = entity.getRuc();
        if (ruc != null) {
            stmt.bindString(3, ruc);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(5, lastName);
        }
 
        String locationAddress = entity.getLocationAddress();
        if (locationAddress != null) {
            stmt.bindString(6, locationAddress);
        }
 
        String privatePhone = entity.getPrivatePhone();
        if (privatePhone != null) {
            stmt.bindString(7, privatePhone);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(8, mobilePhone);
        }
 
        String mailAddress = entity.getMailAddress();
        if (mailAddress != null) {
            stmt.bindString(9, mailAddress);
        }
 
        Boolean nutritionalSatus = entity.getNutritionalSatus();
        if (nutritionalSatus != null) {
            stmt.bindLong(10, nutritionalSatus ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identyCard
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ruc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // locationAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // privatePhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobilePhone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mailAddress
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // nutritionalSatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentyCard(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRuc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocationAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrivatePhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobilePhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMailAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNutritionalSatus(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
