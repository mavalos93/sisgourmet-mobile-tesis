package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Comments;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENTS".
*/
public class CommentsDao extends AbstractDao<Comments, Long> {

    public static final String TABLENAME = "COMMENTS";

    /**
     * Properties of entity Comments.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProviderId = new Property(1, Integer.class, "providerId", false, "PROVIDER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property LunchPackageDescription = new Property(3, String.class, "lunchPackageDescription", false, "LUNCH_PACKAGE_DESCRIPTION");
        public final static Property RatingValue = new Property(4, Integer.class, "ratingValue", false, "RATING_VALUE");
        public final static Property DateComment = new Property(5, String.class, "dateComment", false, "DATE_COMMENT");
        public final static Property CommentDescription = new Property(6, String.class, "commentDescription", false, "COMMENT_DESCRIPTION");
    };


    public CommentsDao(DaoConfig config) {
        super(config);
    }
    
    public CommentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROVIDER_ID\" INTEGER," + // 1: providerId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"LUNCH_PACKAGE_DESCRIPTION\" TEXT," + // 3: lunchPackageDescription
                "\"RATING_VALUE\" INTEGER," + // 4: ratingValue
                "\"DATE_COMMENT\" TEXT," + // 5: dateComment
                "\"COMMENT_DESCRIPTION\" TEXT);"); // 6: commentDescription
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comments entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer providerId = entity.getProviderId();
        if (providerId != null) {
            stmt.bindLong(2, providerId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String lunchPackageDescription = entity.getLunchPackageDescription();
        if (lunchPackageDescription != null) {
            stmt.bindString(4, lunchPackageDescription);
        }
 
        Integer ratingValue = entity.getRatingValue();
        if (ratingValue != null) {
            stmt.bindLong(5, ratingValue);
        }
 
        String dateComment = entity.getDateComment();
        if (dateComment != null) {
            stmt.bindString(6, dateComment);
        }
 
        String commentDescription = entity.getCommentDescription();
        if (commentDescription != null) {
            stmt.bindString(7, commentDescription);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comments readEntity(Cursor cursor, int offset) {
        Comments entity = new Comments( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // providerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lunchPackageDescription
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ratingValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dateComment
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // commentDescription
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comments entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProviderId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLunchPackageDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRatingValue(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDateComment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommentDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comments entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comments entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
