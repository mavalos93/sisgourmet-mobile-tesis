package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.SummaryOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUMMARY_ORDER".
*/
public class SummaryOrderDao extends AbstractDao<SummaryOrder, Long> {

    public static final String TABLENAME = "SUMMARY_ORDER";

    /**
     * Properties of entity SummaryOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderDescription = new Property(1, String.class, "orderDescription", false, "ORDER_DESCRIPTION");
        public final static Property GarnishDescription = new Property(2, String.class, "garnishDescription", false, "GARNISH_DESCRIPTION");
        public final static Property DrinkDescription = new Property(3, String.class, "drinkDescription", false, "DRINK_DESCRIPTION");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Year = new Property(5, Integer.class, "year", false, "YEAR");
        public final static Property Month = new Property(6, Integer.class, "month", false, "MONTH");
        public final static Property Price = new Property(7, String.class, "price", false, "PRICE");
        public final static Property Provider = new Property(8, String.class, "provider", false, "PROVIDER");
        public final static Property Image = new Property(9, byte[].class, "image", false, "IMAGE");
        public final static Property OrderId = new Property(10, Long.class, "orderId", false, "ORDER_ID");
    };


    public SummaryOrderDao(DaoConfig config) {
        super(config);
    }
    
    public SummaryOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUMMARY_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_DESCRIPTION\" TEXT," + // 1: orderDescription
                "\"GARNISH_DESCRIPTION\" TEXT," + // 2: garnishDescription
                "\"DRINK_DESCRIPTION\" TEXT," + // 3: drinkDescription
                "\"DATE\" TEXT," + // 4: date
                "\"YEAR\" INTEGER," + // 5: year
                "\"MONTH\" INTEGER," + // 6: month
                "\"PRICE\" TEXT," + // 7: price
                "\"PROVIDER\" TEXT," + // 8: provider
                "\"IMAGE\" BLOB," + // 9: image
                "\"ORDER_ID\" INTEGER);"); // 10: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUMMARY_ORDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SummaryOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderDescription = entity.getOrderDescription();
        if (orderDescription != null) {
            stmt.bindString(2, orderDescription);
        }
 
        String garnishDescription = entity.getGarnishDescription();
        if (garnishDescription != null) {
            stmt.bindString(3, garnishDescription);
        }
 
        String drinkDescription = entity.getDrinkDescription();
        if (drinkDescription != null) {
            stmt.bindString(4, drinkDescription);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(6, year);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(7, month);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(8, price);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(9, provider);
        }
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(10, image);
        }
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(11, orderId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SummaryOrder readEntity(Cursor cursor, int offset) {
        SummaryOrder entity = new SummaryOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderDescription
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // garnishDescription
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // drinkDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // year
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // month
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // provider
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // orderId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SummaryOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGarnishDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrinkDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYear(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMonth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProvider(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setOrderId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SummaryOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SummaryOrder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
