package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderType = new Property(1, String.class, "orderType", false, "ORDER_TYPE");
        public final static Property StatusOrder = new Property(2, Integer.class, "statusOrder", false, "STATUS_ORDER");
        public final static Property LunchId = new Property(3, Long.class, "lunchId", false, "LUNCH_ID");
        public final static Property SelectedDrinks = new Property(4, String.class, "selectedDrinks", false, "SELECTED_DRINKS");
        public final static Property GarnishId = new Property(5, Integer.class, "garnishId", false, "GARNISH_ID");
        public final static Property CreatedAt = new Property(6, Long.class, "createdAt", false, "CREATED_AT");
        public final static Property SendAppAt = new Property(7, String.class, "SendAppAt", false, "SEND_APP_AT");
        public final static Property ProviderId = new Property(8, Long.class, "providerId", false, "PROVIDER_ID");
        public final static Property OrderAmount = new Property(9, String.class, "orderAmount", false, "ORDER_AMOUNT");
        public final static Property RatingLunch = new Property(10, Long.class, "ratingLunch", false, "RATING_LUNCH");
    };


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_TYPE\" TEXT," + // 1: orderType
                "\"STATUS_ORDER\" INTEGER," + // 2: statusOrder
                "\"LUNCH_ID\" INTEGER," + // 3: lunchId
                "\"SELECTED_DRINKS\" TEXT," + // 4: selectedDrinks
                "\"GARNISH_ID\" INTEGER," + // 5: garnishId
                "\"CREATED_AT\" INTEGER," + // 6: createdAt
                "\"SEND_APP_AT\" TEXT," + // 7: SendAppAt
                "\"PROVIDER_ID\" INTEGER," + // 8: providerId
                "\"ORDER_AMOUNT\" TEXT," + // 9: orderAmount
                "\"RATING_LUNCH\" INTEGER);"); // 10: ratingLunch
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindString(2, orderType);
        }
 
        Integer statusOrder = entity.getStatusOrder();
        if (statusOrder != null) {
            stmt.bindLong(3, statusOrder);
        }
 
        Long lunchId = entity.getLunchId();
        if (lunchId != null) {
            stmt.bindLong(4, lunchId);
        }
 
        String selectedDrinks = entity.getSelectedDrinks();
        if (selectedDrinks != null) {
            stmt.bindString(5, selectedDrinks);
        }
 
        Integer garnishId = entity.getGarnishId();
        if (garnishId != null) {
            stmt.bindLong(6, garnishId);
        }
 
        Long createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(7, createdAt);
        }
 
        String SendAppAt = entity.getSendAppAt();
        if (SendAppAt != null) {
            stmt.bindString(8, SendAppAt);
        }
 
        Long providerId = entity.getProviderId();
        if (providerId != null) {
            stmt.bindLong(9, providerId);
        }
 
        String orderAmount = entity.getOrderAmount();
        if (orderAmount != null) {
            stmt.bindString(10, orderAmount);
        }
 
        Long ratingLunch = entity.getRatingLunch();
        if (ratingLunch != null) {
            stmt.bindLong(11, ratingLunch);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderType
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // statusOrder
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lunchId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // selectedDrinks
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // garnishId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // createdAt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SendAppAt
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // providerId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orderAmount
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // ratingLunch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatusOrder(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLunchId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSelectedDrinks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGarnishId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreatedAt(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSendAppAt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProviderId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setOrderAmount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRatingLunch(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
