package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property IdentifyCard = new Property(3, String.class, "identifyCard", false, "IDENTIFY_CARD");
        public final static Property CurrentAmount = new Property(4, Integer.class, "currentAmount", false, "CURRENT_AMOUNT");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property ImageProfile = new Property(6, byte[].class, "imageProfile", false, "IMAGE_PROFILE");
        public final static Property AsignedToAmount = new Property(7, String.class, "asignedToAmount", false, "ASIGNED_TO_AMOUNT");
        public final static Property AsignedToDate = new Property(8, String.class, "asignedToDate", false, "ASIGNED_TO_DATE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"IDENTIFY_CARD\" TEXT," + // 3: identifyCard
                "\"CURRENT_AMOUNT\" INTEGER," + // 4: currentAmount
                "\"USER_NAME\" TEXT," + // 5: userName
                "\"IMAGE_PROFILE\" BLOB," + // 6: imageProfile
                "\"ASIGNED_TO_AMOUNT\" TEXT," + // 7: asignedToAmount
                "\"ASIGNED_TO_DATE\" TEXT);"); // 8: asignedToDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String identifyCard = entity.getIdentifyCard();
        if (identifyCard != null) {
            stmt.bindString(4, identifyCard);
        }
 
        Integer currentAmount = entity.getCurrentAmount();
        if (currentAmount != null) {
            stmt.bindLong(5, currentAmount);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        byte[] imageProfile = entity.getImageProfile();
        if (imageProfile != null) {
            stmt.bindBlob(7, imageProfile);
        }
 
        String asignedToAmount = entity.getAsignedToAmount();
        if (asignedToAmount != null) {
            stmt.bindString(8, asignedToAmount);
        }
 
        String asignedToDate = entity.getAsignedToDate();
        if (asignedToDate != null) {
            stmt.bindString(9, asignedToDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // identifyCard
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // currentAmount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // imageProfile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // asignedToAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // asignedToDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdentifyCard(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrentAmount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageProfile(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setAsignedToAmount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAsignedToDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
