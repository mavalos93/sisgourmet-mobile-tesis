package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Garnish;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GARNISH".
*/
public class GarnishDao extends AbstractDao<Garnish, Long> {

    public static final String TABLENAME = "GARNISH";

    /**
     * Properties of entity Garnish.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GarnishId = new Property(1, Integer.class, "garnishId", false, "GARNISH_ID");
        public final static Property LunchId = new Property(2, Integer.class, "lunchId", false, "LUNCH_ID");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property UnitPrice = new Property(4, Integer.class, "unitPrice", false, "UNIT_PRICE");
    };


    public GarnishDao(DaoConfig config) {
        super(config);
    }
    
    public GarnishDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GARNISH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GARNISH_ID\" INTEGER," + // 1: garnishId
                "\"LUNCH_ID\" INTEGER," + // 2: lunchId
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"UNIT_PRICE\" INTEGER);"); // 4: unitPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GARNISH\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Garnish entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer garnishId = entity.getGarnishId();
        if (garnishId != null) {
            stmt.bindLong(2, garnishId);
        }
 
        Integer lunchId = entity.getLunchId();
        if (lunchId != null) {
            stmt.bindLong(3, lunchId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Integer unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindLong(5, unitPrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Garnish readEntity(Cursor cursor, int offset) {
        Garnish entity = new Garnish( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // garnishId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // lunchId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // unitPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Garnish entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGarnishId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLunchId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitPrice(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Garnish entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Garnish entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
