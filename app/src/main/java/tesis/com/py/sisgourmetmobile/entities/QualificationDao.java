package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Qualification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUALIFICATION".
*/
public class QualificationDao extends AbstractDao<Qualification, Long> {

    public static final String TABLENAME = "QUALIFICATION";

    /**
     * Properties of entity Qualification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProviderId = new Property(1, Long.class, "providerId", false, "PROVIDER_ID");
        public final static Property QualificationValue = new Property(2, Long.class, "qualificationValue", false, "QUALIFICATION_VALUE");
        public final static Property Commentary = new Property(3, String.class, "commentary", false, "COMMENTARY");
        public final static Property LunchId = new Property(4, Long.class, "lunchId", false, "LUNCH_ID");
        public final static Property GarnishId = new Property(5, Long.class, "garnishId", false, "GARNISH_ID");
    };


    public QualificationDao(DaoConfig config) {
        super(config);
    }
    
    public QualificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUALIFICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROVIDER_ID\" INTEGER," + // 1: providerId
                "\"QUALIFICATION_VALUE\" INTEGER," + // 2: qualificationValue
                "\"COMMENTARY\" TEXT," + // 3: commentary
                "\"LUNCH_ID\" INTEGER," + // 4: lunchId
                "\"GARNISH_ID\" INTEGER);"); // 5: garnishId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUALIFICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Qualification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long providerId = entity.getProviderId();
        if (providerId != null) {
            stmt.bindLong(2, providerId);
        }
 
        Long qualificationValue = entity.getQualificationValue();
        if (qualificationValue != null) {
            stmt.bindLong(3, qualificationValue);
        }
 
        String commentary = entity.getCommentary();
        if (commentary != null) {
            stmt.bindString(4, commentary);
        }
 
        Long lunchId = entity.getLunchId();
        if (lunchId != null) {
            stmt.bindLong(5, lunchId);
        }
 
        Long garnishId = entity.getGarnishId();
        if (garnishId != null) {
            stmt.bindLong(6, garnishId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Qualification readEntity(Cursor cursor, int offset) {
        Qualification entity = new Qualification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // providerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // qualificationValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commentary
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // lunchId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // garnishId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Qualification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProviderId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQualificationValue(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCommentary(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLunchId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setGarnishId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Qualification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Qualification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
