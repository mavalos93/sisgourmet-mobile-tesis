package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Qualification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUALIFICATION".
*/
public class QualificationDao extends AbstractDao<Qualification, Long> {

    public static final String TABLENAME = "QUALIFICATION";

    /**
     * Properties of entity Qualification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProviderId = new Property(1, Long.class, "providerId", false, "PROVIDER_ID");
        public final static Property QualificationValue = new Property(2, Long.class, "qualificationValue", false, "QUALIFICATION_VALUE");
        public final static Property Commentary = new Property(3, String.class, "commentary", false, "COMMENTARY");
        public final static Property MainMenu = new Property(4, String.class, "mainMenu", false, "MAIN_MENU");
        public final static Property Garnish = new Property(5, String.class, "garnish", false, "GARNISH");
        public final static Property Order = new Property(6, Integer.class, "order", false, "ORDER");
        public final static Property StatusSend = new Property(7, Integer.class, "statusSend", false, "STATUS_SEND");
        public final static Property CreatedAt = new Property(8, Long.class, "createdAt", false, "CREATED_AT");
        public final static Property SendAppAt = new Property(9, String.class, "SendAppAt", false, "SEND_APP_AT");
        public final static Property User = new Property(10, String.class, "user", false, "USER");
        public final static Property Observation = new Property(11, String.class, "observation", false, "OBSERVATION");
        public final static Property HttpDetail = new Property(12, String.class, "httpDetail", false, "HTTP_DETAIL");
    };


    public QualificationDao(DaoConfig config) {
        super(config);
    }
    
    public QualificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUALIFICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROVIDER_ID\" INTEGER," + // 1: providerId
                "\"QUALIFICATION_VALUE\" INTEGER," + // 2: qualificationValue
                "\"COMMENTARY\" TEXT," + // 3: commentary
                "\"MAIN_MENU\" TEXT," + // 4: mainMenu
                "\"GARNISH\" TEXT," + // 5: garnish
                "\"ORDER\" INTEGER," + // 6: order
                "\"STATUS_SEND\" INTEGER," + // 7: statusSend
                "\"CREATED_AT\" INTEGER," + // 8: createdAt
                "\"SEND_APP_AT\" TEXT," + // 9: SendAppAt
                "\"USER\" TEXT," + // 10: user
                "\"OBSERVATION\" TEXT," + // 11: observation
                "\"HTTP_DETAIL\" TEXT);"); // 12: httpDetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUALIFICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Qualification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long providerId = entity.getProviderId();
        if (providerId != null) {
            stmt.bindLong(2, providerId);
        }
 
        Long qualificationValue = entity.getQualificationValue();
        if (qualificationValue != null) {
            stmt.bindLong(3, qualificationValue);
        }
 
        String commentary = entity.getCommentary();
        if (commentary != null) {
            stmt.bindString(4, commentary);
        }
 
        String mainMenu = entity.getMainMenu();
        if (mainMenu != null) {
            stmt.bindString(5, mainMenu);
        }
 
        String garnish = entity.getGarnish();
        if (garnish != null) {
            stmt.bindString(6, garnish);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(7, order);
        }
 
        Integer statusSend = entity.getStatusSend();
        if (statusSend != null) {
            stmt.bindLong(8, statusSend);
        }
 
        Long createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(9, createdAt);
        }
 
        String SendAppAt = entity.getSendAppAt();
        if (SendAppAt != null) {
            stmt.bindString(10, SendAppAt);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(11, user);
        }
 
        String observation = entity.getObservation();
        if (observation != null) {
            stmt.bindString(12, observation);
        }
 
        String httpDetail = entity.getHttpDetail();
        if (httpDetail != null) {
            stmt.bindString(13, httpDetail);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Qualification readEntity(Cursor cursor, int offset) {
        Qualification entity = new Qualification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // providerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // qualificationValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commentary
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mainMenu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // garnish
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // order
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // statusSend
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // createdAt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SendAppAt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // observation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // httpDetail
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Qualification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProviderId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQualificationValue(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCommentary(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMainMenu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGarnish(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrder(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStatusSend(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreatedAt(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setSendAppAt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setObservation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHttpDetail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Qualification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Qualification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
