package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Provider;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROVIDER".
*/
public class ProviderDao extends AbstractDao<Provider, Long> {

    public static final String TABLENAME = "PROVIDER";

    /**
     * Properties of entity Provider.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProviderId = new Property(1, Integer.class, "providerId", false, "PROVIDER_ID");
        public final static Property ProviderName = new Property(2, String.class, "providerName", false, "PROVIDER_NAME");
        public final static Property ProviderImage = new Property(3, byte[].class, "providerImage", false, "PROVIDER_IMAGE");
    };


    public ProviderDao(DaoConfig config) {
        super(config);
    }
    
    public ProviderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROVIDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROVIDER_ID\" INTEGER," + // 1: providerId
                "\"PROVIDER_NAME\" TEXT," + // 2: providerName
                "\"PROVIDER_IMAGE\" BLOB);"); // 3: providerImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROVIDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Provider entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer providerId = entity.getProviderId();
        if (providerId != null) {
            stmt.bindLong(2, providerId);
        }
 
        String providerName = entity.getProviderName();
        if (providerName != null) {
            stmt.bindString(3, providerName);
        }
 
        byte[] providerImage = entity.getProviderImage();
        if (providerImage != null) {
            stmt.bindBlob(4, providerImage);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Provider readEntity(Cursor cursor, int offset) {
        Provider entity = new Provider( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // providerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // providerName
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) // providerImage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Provider entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProviderId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setProviderName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProviderImage(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Provider entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Provider entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
