package tesis.com.py.sisgourmetmobile.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tesis.com.py.sisgourmetmobile.entities.Drinks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRINKS".
*/
public class DrinksDao extends AbstractDao<Drinks, Long> {

    public static final String TABLENAME = "DRINKS";

    /**
     * Properties of entity Drinks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property CurrentStock = new Property(2, Integer.class, "currentStock", false, "CURRENT_STOCK");
        public final static Property MinimunStock = new Property(3, Integer.class, "minimunStock", false, "MINIMUN_STOCK");
        public final static Property PriceUnit = new Property(4, Integer.class, "priceUnit", false, "PRICE_UNIT");
        public final static Property Provider = new Property(5, String.class, "provider", false, "PROVIDER");
    };


    public DrinksDao(DaoConfig config) {
        super(config);
    }
    
    public DrinksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRINKS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DESCRIPTION\" TEXT," + // 1: description
                "\"CURRENT_STOCK\" INTEGER," + // 2: currentStock
                "\"MINIMUN_STOCK\" INTEGER," + // 3: minimunStock
                "\"PRICE_UNIT\" INTEGER," + // 4: priceUnit
                "\"PROVIDER\" TEXT);"); // 5: provider
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRINKS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Drinks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        Integer currentStock = entity.getCurrentStock();
        if (currentStock != null) {
            stmt.bindLong(3, currentStock);
        }
 
        Integer minimunStock = entity.getMinimunStock();
        if (minimunStock != null) {
            stmt.bindLong(4, minimunStock);
        }
 
        Integer priceUnit = entity.getPriceUnit();
        if (priceUnit != null) {
            stmt.bindLong(5, priceUnit);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(6, provider);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Drinks readEntity(Cursor cursor, int offset) {
        Drinks entity = new Drinks( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // currentStock
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // minimunStock
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // priceUnit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // provider
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Drinks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrentStock(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMinimunStock(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPriceUnit(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setProvider(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Drinks entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Drinks entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
